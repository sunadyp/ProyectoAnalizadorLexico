
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODrightPOWERCOLON COMMA DEF DIVIDE ELSE EQ EQUALS GE GT IDENTIFIER IF LE LPAREN LT MINUS MOD NE NUMBER PLUS POWER PRINT RETURN RPAREN TIMESprogram : statementsstatements : statements statementstatements : statementstatement : assignment\n| print\n| if_else\n| func_def\n| func_call\n| return_stmt\n| expressionassignment : IDENTIFIER EQUALS expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression MOD expression\n| expression POWER expressionexpression : expression EQ expression\n| expression NE expression\n| expression GT expression\n| expression LT expression\n| expression GE expression\n| expression LE expressionexpression : NUMBERexpression : IDENTIFIERexpression : LPAREN expression RPARENprint : PRINT LPAREN expression RPARENif_else : IF expression COLON statement ELSE COLON statement\n| IF expression COLON statementreturn_stmt : RETURN expressionfunc_def : DEF IDENTIFIER LPAREN param_list RPAREN COLON statementsfunc_call : IDENTIFIER LPAREN arg_list RPARENparam_list : IDENTIFIER\n| param_list COMMA IDENTIFIERparam_list : arg_list : expression\n| arg_list COMMA expressionarg_list : '
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,67,68,69,71,72,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,-25,35,35,37,35,-24,-2,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,11,62,-32,35,-27,-29,70,11,11,-28,11,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,17,18,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,58,60,61,68,69,71,72,],[12,12,-3,-4,-5,-6,-7,-8,-9,-10,-25,-24,-2,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,12,-32,-27,-29,12,12,-28,12,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,17,18,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,58,60,61,68,69,71,72,],[14,14,-3,-4,-5,-6,-7,-8,-9,-10,-25,-24,-2,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,14,-32,-27,-29,14,14,-28,14,]),'DEF':([0,2,3,4,5,6,7,8,9,10,11,17,18,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,58,60,61,68,69,71,72,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-25,-24,-2,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,15,-32,-27,-29,15,15,-28,15,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,17,18,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,58,60,61,68,69,71,72,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-25,-24,-2,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,16,-32,-27,-29,16,16,-28,16,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,58,59,60,61,68,69,71,72,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-25,17,17,17,-24,-2,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,17,-32,17,-27,-29,17,17,-28,17,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,56,58,59,60,61,68,69,71,72,],[13,13,-3,-4,-5,-6,-7,-8,-9,-10,32,33,13,13,13,-24,-2,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-25,57,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,13,-32,13,-27,-29,13,13,-28,13,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,17,18,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,58,60,61,71,72,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-25,-24,-2,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,-32,-27,-29,-28,-31,]),'ELSE':([3,4,5,6,7,8,9,10,11,17,18,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,55,58,60,61,71,72,],[-3,-4,-5,-6,-7,-8,-9,-10,-25,-24,-2,-25,-30,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-11,-26,-32,-27,65,-28,-31,]),'PLUS':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[19,-25,-24,19,-25,19,19,-12,-13,-14,-15,-16,-17,19,19,19,19,19,19,19,19,19,-26,19,]),'MINUS':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[20,-25,-24,20,-25,20,20,-12,-13,-14,-15,-16,-17,20,20,20,20,20,20,20,20,20,-26,20,]),'TIMES':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[21,-25,-24,21,-25,21,21,21,21,-14,-15,-16,-17,21,21,21,21,21,21,21,21,21,-26,21,]),'DIVIDE':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[22,-25,-24,22,-25,22,22,22,22,-14,-15,-16,-17,22,22,22,22,22,22,22,22,22,-26,22,]),'MOD':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[23,-25,-24,23,-25,23,23,23,23,-14,-15,-16,-17,23,23,23,23,23,23,23,23,23,-26,23,]),'POWER':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[24,-25,-24,24,-25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-26,24,]),'EQ':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[25,-25,-24,25,-25,25,25,-12,-13,-14,-15,-16,-17,25,25,25,25,25,25,25,25,25,-26,25,]),'NE':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[26,-25,-24,26,-25,26,26,-12,-13,-14,-15,-16,-17,26,26,26,26,26,26,26,26,26,-26,26,]),'GT':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[27,-25,-24,27,-25,27,27,-12,-13,-14,-15,-16,-17,27,27,27,27,27,27,27,27,27,-26,27,]),'LT':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[28,-25,-24,28,-25,28,28,-12,-13,-14,-15,-16,-17,28,28,28,28,28,28,28,28,28,-26,28,]),'GE':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[29,-25,-24,29,-25,29,29,-12,-13,-14,-15,-16,-17,29,29,29,29,29,29,29,29,29,-26,29,]),'LE':([10,11,17,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,64,],[30,-25,-24,30,-25,30,30,-12,-13,-14,-15,-16,-17,30,30,30,30,30,30,30,30,30,-26,30,]),'EQUALS':([11,],[31,]),'RPAREN':([17,32,34,35,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,62,63,64,70,],[-24,-38,55,-25,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,58,-36,60,-26,-35,-33,66,-37,-34,]),'COLON':([17,35,36,39,40,41,42,43,44,45,46,47,48,49,50,55,65,66,],[-24,-25,56,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-26,68,69,]),'COMMA':([17,32,35,39,40,41,42,43,44,45,46,47,48,49,50,52,53,55,57,62,63,64,70,],[-24,-38,-25,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,59,-36,-26,-35,-33,67,-37,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,69,],[2,72,]),'statement':([0,2,56,68,69,72,],[3,18,61,71,3,18,]),'assignment':([0,2,56,68,69,72,],[4,4,4,4,4,4,]),'print':([0,2,56,68,69,72,],[5,5,5,5,5,5,]),'if_else':([0,2,56,68,69,72,],[6,6,6,6,6,6,]),'func_def':([0,2,56,68,69,72,],[7,7,7,7,7,7,]),'func_call':([0,2,56,68,69,72,],[8,8,8,8,8,8,]),'return_stmt':([0,2,56,68,69,72,],[9,9,9,9,9,9,]),'expression':([0,2,13,14,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,56,59,68,69,72,],[10,10,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,10,64,10,10,10,]),'arg_list':([32,],[52,]),'param_list':([57,],[63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','Parser.py',13),
  ('statements -> statements statement','statements',2,'p_statements_multiple','Parser.py',18),
  ('statements -> statement','statements',1,'p_statements_single','Parser.py',22),
  ('statement -> assignment','statement',1,'p_statement','Parser.py',27),
  ('statement -> print','statement',1,'p_statement','Parser.py',28),
  ('statement -> if_else','statement',1,'p_statement','Parser.py',29),
  ('statement -> func_def','statement',1,'p_statement','Parser.py',30),
  ('statement -> func_call','statement',1,'p_statement','Parser.py',31),
  ('statement -> return_stmt','statement',1,'p_statement','Parser.py',32),
  ('statement -> expression','statement',1,'p_statement','Parser.py',33),
  ('assignment -> IDENTIFIER EQUALS expression','assignment',3,'p_assignment','Parser.py',38),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','Parser.py',43),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Parser.py',44),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','Parser.py',45),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Parser.py',46),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','Parser.py',47),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','Parser.py',48),
  ('expression -> expression EQ expression','expression',3,'p_expression_compare','Parser.py',52),
  ('expression -> expression NE expression','expression',3,'p_expression_compare','Parser.py',53),
  ('expression -> expression GT expression','expression',3,'p_expression_compare','Parser.py',54),
  ('expression -> expression LT expression','expression',3,'p_expression_compare','Parser.py',55),
  ('expression -> expression GE expression','expression',3,'p_expression_compare','Parser.py',56),
  ('expression -> expression LE expression','expression',3,'p_expression_compare','Parser.py',57),
  ('expression -> NUMBER','expression',1,'p_expression_number','Parser.py',61),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','Parser.py',65),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','Parser.py',69),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','Parser.py',74),
  ('if_else -> IF expression COLON statement ELSE COLON statement','if_else',7,'p_if_else','Parser.py',79),
  ('if_else -> IF expression COLON statement','if_else',4,'p_if_else','Parser.py',80),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','Parser.py',88),
  ('func_def -> DEF IDENTIFIER LPAREN param_list RPAREN COLON statements','func_def',7,'p_func_def','Parser.py',93),
  ('func_call -> IDENTIFIER LPAREN arg_list RPAREN','func_call',4,'p_func_call','Parser.py',98),
  ('param_list -> IDENTIFIER','param_list',1,'p_param_list','Parser.py',102),
  ('param_list -> param_list COMMA IDENTIFIER','param_list',3,'p_param_list','Parser.py',103),
  ('param_list -> <empty>','param_list',0,'p_param_list_empty','Parser.py',110),
  ('arg_list -> expression','arg_list',1,'p_arg_list','Parser.py',114),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','Parser.py',115),
  ('arg_list -> <empty>','arg_list',0,'p_arg_list_empty','Parser.py',122),
]
